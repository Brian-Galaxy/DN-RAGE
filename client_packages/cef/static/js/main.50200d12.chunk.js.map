{"version":3,"sources":["components/authorization/Pages/Content/AuthLeft.jsx","components/authorization/Pages/Content/AuthRight.jsx","components/authorization/Pages/Content/RegRight.jsx","components/authorization/Pages/Content/RegLeft.jsx","EventManager.js","components/authorization/Pages/Authorization.jsx","components/authorization/AuthMain.jsx","App.js","serviceWorker.js","index.js"],"names":["AuthLeft","props","state","Fragment","className","React","Component","AuthRight","type","name","placeholder","onChange","this","valueLogin","valuePassword","onClick","authLogin","RegRight","valueMail","valuePasswordCheck","id","defaultChecked","checked","checkedRules","htmlFor","RegLeft","EventManager","window","events","addHandler","eventName","handler","push","removeHandler","index","indexOf","splice","Authorization","setState","current_page","login","mail","password","passwordCheck","changePage","bind","currentUrl","location","pathname","mp","trigger","console","log","event","target","value","click","checkedPoli","AuthMain","showComponent","onMessageFromClient","onMessage","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50200d12.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass AuthLeft extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"content-left\">\r\n          <div className=\"circle-auth\">\r\n            <div className=\"circle-a circle-change\"></div>\r\n            <div className=\"circle-a\"></div>\r\n          </div>\r\n          <div className=\"logo-auth\"></div>\r\n          <div className=\"bg-auth\"></div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default AuthLeft;\r\n","import React from 'react';\r\n\r\nclass AuthRight extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"input-auth\">\r\n          <input type=\"text\" name=\"login\" className=\"input-login input-lg-ots\" placeholder=\"ВВЕДИТЕ ЛОГИН\" onChange={this.props.valueLogin} />\r\n          <input type=\"password\" name=\"login\" className=\"input-login\" placeholder=\"ВВЕДИТЕ ПАРОЛЬ\" onChange={this.props.valuePassword} />\r\n        </div>\r\n        <div className=\"button-auth\" onClick={() => this.props.authLogin()}>ВОЙТИ</div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default AuthRight;\r\n","import React from 'react';\r\n\r\nclass RegRight extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"input-auth\">\r\n          <div className=\"strok1\">\r\n            <input type=\"text\" name=\"login\" className=\"input-reg input-reg-right\" placeholder=\"логин\" onChange={this.props.valueLogin} />\r\n            <input type=\"text\" name=\"login\" className=\"input-reg\" placeholder=\"E-MAIL\" onChange={this.props.valueMail} />\r\n          </div>\r\n          <div className=\"strok2\">\r\n            <input type=\"password\" name=\"login\" className=\"input-reg input-reg-right\" placeholder=\"пароль\" onChange={this.props.valuePassword} />\r\n            <input type=\"password\" name=\"login\" className=\"input-reg\" placeholder=\"повторите ПАРОЛЬ\" onChange={this.props.valuePasswordCheck} />\r\n          </div>\r\n        </div>\r\n        <div className=\"reg-checkbox\">\r\n          <input type=\"checkbox\" name=\"chek1\" id=\"chk1\" className=\"chk-reg-inpt\" defaultChecked={this.props.checked} onChange={this.props.checkedRules} />\r\n          <label className=\"chk_reg\" htmlFor=\"chk1\">\r\n            <div className=\"chk-circle\"></div>\r\n            <span>Согласен с правилами проекта и принимаю условия</span>\r\n          </label>\r\n        </div>\r\n        <div className=\"button-reg\">ГОТОВО</div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default RegRight;\r\n","import React from 'react';\r\n\r\nclass RegLeft extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"content-left\">\r\n          <div className=\"circle-auth\">\r\n            <div className=\"circle-a\"></div>\r\n            <div className=\"circle-a circle-change\"></div>\r\n          </div>\r\n          <div className=\"logo-reg\"></div>\r\n          <div className=\"bg-reg\"></div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default RegLeft;\r\n","const EventManager = window.EventManager || {\r\n    events: {},\r\n\r\n    addHandler: function(eventName, handler) {\r\n        if (eventName in this.events) {\r\n            this.events[eventName].push(handler);\r\n        }\r\n        else {\r\n            this.events[eventName] = [handler];\r\n        }\r\n    },\r\n\r\n    removeHandler: function(eventName, handler) {\r\n        if (eventName in this.events) {\r\n            var index = this.events[eventName].indexOf(handler);\r\n            this.events[eventName].splice(index, 1);\r\n        }\r\n    },\r\n};\r\n\r\nwindow.EventManager = EventManager;\r\nexport default EventManager;","import React from 'react';\r\nimport AuthLeft from './Content/AuthLeft';\r\nimport AuthRight from './Content/AuthRight';\r\nimport RegRight from './Content/RegRight';\r\nimport RegLeft from './Content/RegLeft';\r\nimport EventManager from \"../../../EventManager\";\r\n\r\nclass Authorization extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      current_page: 'Авторизация',\r\n      checked: false,\r\n      login: '',\r\n      mail: '',\r\n      password: '',\r\n      passwordCheck: ''\r\n    };\r\n    this.changePage = this.changePage.bind(this);\r\n  }\r\n\r\n/*  componentDidMount() {\r\n    EventManager.addHandler('onMessageFromClient', this.onMessageFromClient.bind(this))\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    EventManager.removeHandler('onMessageFromClient', this.onMessage)\r\n  }\r\n\r\n  onMessageFromClient(value) {\r\n    this.setState({message: value})\r\n  }*/\r\n\r\n  click() {\r\n    let currentUrl = window.location.pathname;\r\n    mp.trigger('showUrl', currentUrl); // eslint-disable-line\r\n    console.log(\"Click!\"); // eslint-disable-line\r\n  }\r\n\r\n  changePage(name) {this.setState({current_page: name})}\r\n  valueLogin(event) {this.setState({login: event.target.value})}\r\n  valueMail(event) {this.setState({mail: event.target.value})}\r\n  valuePassword(event) {this.setState({password: event.target.value})}\r\n  valuePasswordCheck(event) {this.setState({passwordCheck: event.target.value})}\r\n  authLogin(){\r\n    // типо проверка данных\r\n\r\n  }\r\n  checkedRules = () => {\r\n    this.setState({\r\n      checked: !this.state.checked\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.current_page === \"Авторизация\" ?\r\n          <AuthLeft />\r\n          : null}\r\n        {this.state.current_page === \"Регистрация\" ?\r\n          <RegLeft />\r\n          : null}\r\n        <div className=\"content-right\">\r\n          <div className=\"menu-auth\">\r\n            <input type=\"radio\" name=\"changemenu\" id=\"changemenu1\" defaultChecked onChange={() => {this.changePage('Авторизация'); this.click()}} />\r\n            <label htmlFor=\"changemenu1\" className=\"box-menu-auth\">\r\n              <span>Авторизация</span>\r\n            </label>\r\n            <input type=\"radio\" name=\"changemenu\" id=\"changemenu2\" onChange={() => {this.changePage('Регистрация'); this.click()}} />\r\n            <label htmlFor=\"changemenu2\" className=\"box-menu-auth\">\r\n              <span>Регистрация</span>\r\n            </label>\r\n          </div>\r\n          {this.state.current_page === \"Авторизация\" ?\r\n            <AuthRight\r\n              valueLogin={this.valueLogin.bind(this)}\r\n              valuePassword={this.valuePassword.bind(this)}\r\n              authLogin={this.props.authLogin.bind(this)}\r\n            />\r\n            : null}\r\n          {this.state.current_page === \"Регистрация\" ?\r\n            <RegRight\r\n              valueLogin={this.valueLogin.bind(this)}\r\n              valueMail={this.valueMail.bind(this)}\r\n              valuePassword={this.valuePassword.bind(this)}\r\n              valuePasswordCheck={this.valuePasswordCheck.bind(this)}\r\n              checked={this.state.checked}\r\n              checkedPoli={this.checkedRules.bind(this)}\r\n            />\r\n            : null}\r\n\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default Authorization;\r\n","import React from 'react';\r\nimport './css/authorization.css';\r\nimport './css/adaptive.css';\r\nimport './fonts/style.css'\r\nimport Authorization from './Pages/Authorization';\r\nimport EventManager from \"../../EventManager\";\r\n\r\nclass AuthMain extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      showComponent: true\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    EventManager.addHandler('onMessageFromClient', this.onMessageFromClient.bind(this))\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    EventManager.removeHandler('onMessageFromClient', this.onMessage)\r\n  }\r\n\r\n  onMessageFromClient(value) {\r\n    mp.trigger('chatMsg', 'onMessageFromClient trigger'); // eslint-disable-line\r\n    if(value.type === 'show') { this.setState({showComponent: !this.state.showComponent})}\r\n    else return;\r\n  }\r\n\r\n  authLogin(){\r\n    this.setState({showComponent: false})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.showComponent ?\r\n        <div className=\"auth-main\">\r\n          <div className=\"bg-left\">\r\n            <div className=\"position-bg-top\">\r\n              <div className=\"auth-bg-top\"></div>\r\n            </div>\r\n            <div className=\"position-bg-bottom\">\r\n              <div className=\"auth-bg-bottom\"></div>\r\n            </div>\r\n          </div>\r\n          <div className=\"bg-right\" id=\"bg-right\">\r\n            <div className=\"auth-bg-right\"></div>\r\n          </div>\r\n          <div className=\"auth-content\">\r\n            <Authorization\r\n              authLogin={this.authLogin.bind(this)}\r\n            />\r\n          </div>\r\n        </div>\r\n            : null}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default AuthMain;\r\n","import React from 'react';\r\nimport './css/base.css'\r\nimport './css/adaptive.css'\r\nimport AuthMain from './components/authorization/AuthMain';\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"box\" id=\"box\">\r\n        <AuthMain />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}