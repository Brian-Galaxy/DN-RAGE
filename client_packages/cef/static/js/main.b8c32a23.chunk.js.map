{"version":3,"sources":["components/authorization/Pages/Authorization.jsx","EventManager.js","components/authorization/AuthMain.jsx","App.js","serviceWorker.js","index.js"],"names":["Authorization","props","checked","setState","state","showAuto","login","password","mailReg","loginReg","passwordReg","passwordRegCheck","value","this","event","target","Fragment","className","id","type","name","defaultChecked","onChange","handleChange","htmlFor","placeholder","valueLogin","bind","valuePassword","onClick","clickAuto","valueLoginReg","valuePasswordReg","valueMailReg","valuePasswordRegCheck","clickReg","React","Component","EventManager","window","events","addHandler","eventName","handler","push","removeHandler","index","indexOf","splice","AuthMain","show","path","exact","component","to","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8c32a23.chunk.js","sourcesContent":["import React from 'react';\r\n/*import { Link } from \"react-router-dom\";*/\r\n\r\n\r\nclass Authorization extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      showAuto: true,\r\n      checked: false,\r\n\r\n      login: '',\r\n      password: '',\r\n      mailReg: '',\r\n      loginReg: '',\r\n      passwordReg: '',\r\n      passwordRegCheck: '',\r\n    }\r\n\r\n  };\r\nhandleChange(value){\r\n  this.setState({showAuto: value});\r\n};\r\nvalueLogin(event) { this.setState({ login: event.target.value }) };\r\nvaluePassword(event) { this.setState({ password: event.target.value }) };\r\n\r\nvalueMailReg(event) { this.setState({ mailReg: event.target.value }) };\r\nvalueLoginReg(event) { this.setState({ loginReg: event.target.value }) };\r\nvaluePasswordReg(event) { this.setState({ passwordReg: event.target.value }) };\r\nvaluePasswordRegCheck(event) { this.setState({ passwordRegCheck: event.target.value }) };\r\n\r\nclickAuto() {};\r\nclickReg() {};\r\n\r\n  checked = () => {\r\n    this.setState({\r\n      checked: !this.state.checked\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"background-auth\">\r\n          <div className=\"bg-left\">\r\n            <div className=\"liner-top\"></div>\r\n            {this.state.showAuto ?\r\n              <div className=\"bg-position-auth\">\r\n                <div className=\"bg-top-main\">\r\n                  <div className=\"circle-box\">\r\n                    <div className=\"circle active\"></div>\r\n                    <div className=\"circle\"></div>\r\n                  </div>\r\n                  <div className=\"bg-logo-auth\"></div>\r\n                </div>\r\n                <div className=\"bg-change-auth\"></div>\r\n              </div>\r\n              :\r\n              <div className=\"bg-position-auth\">\r\n                <div className=\"bg-top-main\">\r\n                  <div className=\"circle-box\">\r\n                    <div className=\"circle\"></div>\r\n                    <div className=\"circle active\"></div>\r\n                  </div>\r\n                  <div className=\"bg-logo-reg\"></div>\r\n                </div>\r\n                <div className=\"bg-change-reg\"></div>\r\n              </div>\r\n            }\r\n            <div className=\"bg-bottom\"></div>\r\n          </div>\r\n          <div className=\"bg-right\" id=\"adaptive-bg-right\">\r\n            <div className=\"bg-right-auth\"></div>\r\n          </div>\r\n        </div>\r\n        <div className=\"content-main\">\r\n          <div className=\"content-auth\">\r\n            <div className=\"button-main\">\r\n              <input type=\"radio\" id=\"btn-radio-auth1\" name=\"btn-radio-auth\" defaultChecked=\"true\" onChange={() => this.handleChange(true)} />\r\n              <label htmlFor=\"btn-radio-auth1\" className=\"button-auth\">Авторизация</label>\r\n              <input type=\"radio\" id=\"btn-radio-auth2\" name=\"btn-radio-auth\" onChange={() => this.handleChange(false)} />\r\n              <label htmlFor=\"btn-radio-auth2\" className=\"button-auth\">Регистрация</label>\r\n            </div>\r\n            {this.state.showAuto ?\r\n              <React.Fragment>\r\n                <div className=\"auth-input\">\r\n                  <input type=\"text\" placeholder=\"введите логин\" name=\"login-auth\" className=\"auth-input-style\" value={this.state.login} onChange={this.valueLogin.bind(this)} />\r\n                  <input type=\"password\" placeholder=\"введите пароль\" name=\"password-auth\" className=\"auth-input-style\" onChange={this.valuePassword.bind(this)} />\r\n                </div>\r\n                {/*<Link to=\"/create\">*/}\r\n                  <div className=\"button-auth-click\" onClick={this.clickAuto}>Войти</div>\r\n                {/*</Link>*/}\r\n              </React.Fragment>\r\n              :\r\n              <React.Fragment>\r\n                <div className=\"auth-input\">\r\n                  <div className=\"reg-bloc\">\r\n                    <input type=\"text\" placeholder=\"Придумайте логин\" name=\"create-login\" className=\"reg-input-style\" onChange={this.valueLoginReg.bind(this)} />\r\n                    <input type=\"password\" placeholder=\"Придумайте пароль\" name=\"create-password\" className=\"reg-input-style\" onChange={this.valuePasswordReg.bind(this)} />\r\n                  </div>\r\n                  <div className=\"reg-bloc\">\r\n                    <input type=\"text\" placeholder=\"Введите свой E-mail\" name=\"create-email\" className=\"reg-input-style\" onChange={this.valueMailReg.bind(this)} />\r\n                    <input type=\"password\" placeholder=\"Повторите пароль\" name=\"create-password-repeat\" className=\"reg-input-style\" onChange={this.valuePasswordRegCheck.bind(this)} />\r\n                  </div>\r\n                  <div className=\"reg-checkbox\">\r\n                    <input type=\"checkbox\" name=\"chek1\" id=\"chk1\" className=\"chk-reg-inpt\" defaultChecked={this.state.checked} onChange={this.checked} />\r\n                    <label className=\"chk_reg\" htmlFor=\"chk1\">\r\n                      <div className=\"chk-circle\"></div>\r\n                      <span>Согласен с правилами проекта и принимаю условия</span>\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n                {/*<Link to=\"/create\">*/}\r\n                  <div className=\"button-auth-click\" onClick={this.clickReg}>Готово</div>\r\n                {/*</Link>*/}\r\n              </React.Fragment>\r\n            }\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default Authorization;\r\n","const EventManager = window.EventManager || {\r\n    events: {},\r\n\r\n    addHandler: function(eventName, handler) {\r\n        if (eventName in this.events) {\r\n            this.events[eventName].push(handler);\r\n        }\r\n        else {\r\n            this.events[eventName] = [handler];\r\n        }\r\n    },\r\n\r\n    removeHandler: function(eventName, handler) {\r\n        if (eventName in this.events) {\r\n            var index = this.events[eventName].indexOf(handler);\r\n            this.events[eventName].splice(index, 1);\r\n        }\r\n    },\r\n};\r\n\r\nwindow.EventManager = EventManager;\r\nexport default EventManager;","import React from 'react';\r\nimport './css/auto.css'\r\nimport Authorization from './Pages/Authorization';\r\nimport { BrowserRouter as Router, Route, Redirect} from \"react-router-dom\";\r\n/*import CreatePlayer from './Pages/CreatePlayer';*/\r\nimport EventManager from \"../../EventManager\";\r\n\r\nclass AuthMain extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      show: true,\r\n      path: '/'\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    EventManager.addHandler('authMain', value => {\r\n      if(value.type === 'show') { this.setState({show: !this.state.show})}\r\n      else return;\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.show ?\r\n        <div className=\"auth-main\">\r\n          \r\n            <Router>\r\n            <Route exact path=\"/\" component={Authorization} />\r\n            {/*<Route exact path=\"/create\" component={CreatePlayer} />*/}\r\n            <Redirect to={this.state.path} push />\r\n            </Router>\r\n          \r\n        </div>\r\n        : null\r\n  }\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default AuthMain;\r\n","import React from 'react';\r\nimport './css/base.css'\r\nimport './css/adaptive.css'\r\nimport './fonts/style.css'\r\nimport AuthMain from './components/authorization/AuthMain';\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"box\" id=\"box\">\r\n        <AuthMain />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}